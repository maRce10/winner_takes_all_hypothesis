---
title: Acoustic and statistical analysis
subtitle: Winner takes all acoustic adapation
author: <a href="http://researcher.website.com/">Researcher name</a>
date: "`r Sys.Date()`"
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-fold: show
    code-tools: true
    css: qmd.css
editor_options: 
  chunk_output_type: console
---



```{r set root directory, echo = FALSE}

# set working directory 
knitr::opts_knit$set(root.dir =  "..")

```

```{r add link to github repo, echo = FALSE, results='asis'}

# print link to github repo if any
if (file.exists("./.git/config")){
  config <- readLines("./.git/config")
  url <- grep("url",  config, value = TRUE)
  url <- gsub("\\turl = |.git$", "", url)
  cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
  }

```

```{r setup style, echo = FALSE, message = FALSE, warning=FALSE}

# options to customize chunk outputs
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE
 )

```


<!-- skyblue box -->

::: {.alert .alert-info}

# Purpose {.unnumbered .unlisted}

- Measure degradation on re-recorded files

- Run stats

:::

&nbsp; 


<!-- light brown box -->
::: {.alert .alert-warning}

# Report overview {.unnumbered .unlisted}

- You can have the sections listed here, for instance:

  - [Lorem ipsum](#lorem-ipsum)
  - [Takeaways](#takeaways)

:::

&nbsp;

# Analysis flowchart {.unnumbered .unlisted}
```{mermaid, fig.align = "center"}
flowchart
  A[Read data] --> B(Format data) 
  B --> C(Graphs)
  C --> D(Statistical analysis)
  D --> E(Model summary) 

style A fill:#44015466
style B fill:#3E4A894D
style C fill:#26828E4D
style D fill:#6DCD594D

```


# Load packages {.unnumbered .unlisted}

```{r load packages}

# knitr is require for creating html/pdf/word reports
# formatR is used for soft-wrapping code

# install/ load packages
sketchy::load_packages(
    packages = c(
        "knitr",
        "formatR",
        "baRulho",
        "viridis",
        "warbleR",
        "Rraven",
        "brms",
        "ggplot2",
        "corrplot",
        "emmeans",
        "ggsignif"
    )
)
```
# Time sync all replicates

```{r}

metadata <- read.csv("./data/raw/metadata_playback_experiments.csv")

master.sf <- read.csv("./data/processed/master_annotations.csv")

# remove bird songs
master.sf <- master.sf[c(1:(grep("Haemorhous", master.sf$orig.sound.file)[1] - 1), nrow(master.sf)), ]

# rename sound file
master.sf$sound.files <- "consolidated_master_only_synthetic.wav"

master.sf$sound.id <- paste(master.sf$orig.sound.file, seq_len(nrow(master.sf)),
    sep = "-")

master.sf$sound.id[1] <- "start_marker"

master.sf$sound.id[nrow(master.sf)] <- "end_marker"

master.sf$start[master.sf$sound.id == "end_marker"] <- 194.074

master.sf$end[master.sf$sound.id == "end_marker"] <- 194.931

exp_raven(master.sf, path = "./data/raw", file.name = "master_annotations",
    sound.file.path = "./data/raw/recordings")

found.starts <- baRulho::find_markers(X = master.sf, markers = c("start_marker", "end_marker"), path = "./data/raw/recordings", cores = 3)

warbleR::info_sound_files("./data/raw/recordings")

alg.tests <- align_test_files(X = master.sf, Y = found.starts, path = "./data/raw/recordings",
    by.song = FALSE)

alg.tests <- alg.tests[!(alg.tests$sound.files %in% "ZOOM0012_Tr2.WAV" & alg.tests$selec %in% 1:18), ]

alg.tests$row <- 1:nrow(alg.tests)

alg.tests <- alg.tests[!alg.tests$row %in% 13469:13486,]

exp_raven(alg.tests, path = "./data/processed", file.name = "check_alignment", sound.file.path = "./data/raw/recordings", single.file = TRUE)

getOption('baRulho')$files_to_check_align_test_files

cs <- check_sels(alg.tests, path = "./data/raw/recordings")

table(alg.tests$sound.files)



alg.tests <- manual_realign(X = alg.tests, Y = master.sf, path = "./data/raw/recordings", flim = c(0, 6), marker = "end_marker")


# add metadata
metadata$transect.id <- paste(metadata$habitat.type, metadata$transect.., sep = "-")

alg.tests$transect <- sapply(alg.tests$sound.files, function(x) metadata$transect.id[metadata$sound.file.name == x][1])

alg.tests$distance <- sapply(alg.tests$sound.files, function(x) metadata$distance.from.signal..m.[metadata$sound.file.name == x][1])

alg.tests$habitat.type <- sapply(alg.tests$sound.files, function(x) metadata$habitat.type[metadata$sound.file.name == x][1])

# remove markers
alg.tests <- alg.tests[grep("marker", alg.tests$sound.id,
 invert = TRUE), ]

alg.tests.est <- selection_table(alg.tests, extended = TRUE, path = "./data/raw/recordings")

saveRDS(alg.tests.est, "./data/raw/extended_selection_table_rerecorded_sounds.RDS")

```

# Measure degradation


```{r}
alg.tests.est <- readRDS("../data/processed/extended_selection_table_rerecorded_sounds.RDS")

table(alg.tests.est$sound.id) 

table(alg.tests.est$distance)

# remove 3 m distance
alg.tests.est <- alg.tests.est[alg.tests.est$distance != 3, ]

# keep only not harm 
alg.tests.est <- alg.tests.est[grep("no.harm", alg.tests.est$sound.id), ]

alg.tests.est

cores <- 3

alg.tests.est <- resample_est(alg.tests.est, samp.rate = 22.05, parallel = cores)


saveRDS(alg.tests.est, "./data/raw/extended_selection_table_subset_resampled_rerecorded_sounds.RDS")

```


```{r}

alg.tests.est <- readRDS("./data/processed/extended_selection_table_subset_resampled_rerecorded_sounds.RDS")

alg.tests.est <- set_reference_sounds(alg.tests.est)

# run blur ratio
alg.tests.est <- blur_ratio(alg.tests.est, cores = cores)

# run Spectrum blur ratio
alg.tests.est <- spectrum_blur_ratio(alg.tests.est, cores = cores)

# run envelope correlation
alg.tests.est <- excess_attenuation(alg.tests.est, cores = cores)

# run envelope correlation
alg.tests.est <- envelope_correlation(alg.tests.est, cores = cores)

# run spectrum correlation
alg.tests.est <- spectrum_correlation(alg.tests.est, cores = cores)

# run signal to noise ratio
alg.tests.est <- signal_to_noise_ratio(alg.tests.est, cores = cores, mar = 0.03)

# run tail to noise ratio
alg.tests.est <- tail_to_signal_ratio(alg.tests.est, cores = cores, tsr.formula = 2, mar = 0.03)

names(alg.tests.est)[ncol(alg.tests.est)] <- "tail.to.noise.ratio"

# run tail to signal ratio
alg.tests.est <- tail_to_signal_ratio(alg.tests.est, cores = cores, tsr.formula = 1, mar = 0.03)

# run spcc
source("~/Dropbox/R_package_testing/baRulho/R/spcc.R")
source("~/Dropbox/R_package_testing/warbleR/R/cross_correlation.R")
source("~/Dropbox/R_package_testing/warbleR/R/internal_functions.R")

alg.tests.est <- spcc(X = alg.tests.est, cores = cores)


alg.tests <- as.data.frame(alg.tests.est)

write.csv(alg.tests, "./data/processed/degradation_metrics.csv", row.names = FALSE)

```

<!-- '&nbsp;' adds blank space -->



<!-- light green box -->

::: {.alert .alert-success}

# Takeaways {.unnumbered .unlisted}

::: 

&nbsp;

<!-- '---' adds a gray vertical line -->

---

&nbsp; 
 
 <!-- add packages used, system details and versions  -->
 
# Session information {.unnumbered .unlisted}

```{r session info, echo=F}

sessionInfo()

```
